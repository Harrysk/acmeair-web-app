kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "acmeair-web-app-pipeline"
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        // path of the template to use
        def templatePath = 'https://raw.githubusercontent.com/acme-air/acmeair-web-app/master/openshift/templates/nodejs-mongodb.json'
        // name of the template that will be created
        def templateName = 'acmeair-web-app'
        // NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
        // and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
        // will not be fully engaged.
        pipeline {
            agent {
              node {
                // spin up a node.js slave pod to run this build on
                label 'nodejs'
              }
            }
            options {
                // set a timeout of 20 minutes for this pipeline
                timeout(time: 20, unit: 'MINUTES')
            }

            stages {
                stage('initialize') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    echo "Using project: ${openshift.project()}"

                                    // delete everything with this template label
                                    openshift.selector("all", [ template : templateName ]).delete()
                                    // delete any secrets with this template label
                                    if (openshift.selector("secrets", templateName).exists()) {
                                        openshift.selector("secrets", templateName).delete()
                                    }
                                }
                            }
                            git 'https://github.com/acme-air/acmeair-web-app'
                        }
                    }
                }
                stage('build') {
                    parallel {
                        stage('local') {
                            steps {
                                script {
                                    sh 'docker build -t acmeair-web-app:latest .'
                                } // script
                            } // steps
                        } // stage
                        stage('remote') {
                            steps {
                                script {
                                    openshift.withCluster() {
                                        openshift.withProject() {
                                            // create a new application from the templatePath
                                            openshift.newApp(templatePath)

                                            def builds = openshift.selector("bc", templateName).related('builds')
                                            builds.untilEach(1) {
                                                return (it.object().status.phase == "Complete")
                                            }
                                        }
                                    }
                                } // script
                            } // steps
                        } // stage
                    } // parallel
                } // stage                
                stage('test') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    echo "Using project: ${openshift.project()}"
                                }
                            }
                        } // script
                    } // steps
                } // stage                
                stage('scan') {
                    parallel {
                        // stage('SonarQube Analysis') {
                        //     steps {
                        //         script {
                        //             withSonarQubeEnv('acme-sonarqube') {
                        //                 sh "printenv"
                        //                 def scannerHome = tool 'acme-sonarqube';
                        //                 sh "echo ${scannerHome}"
                        //                 sh "${scannerHome}/bin/sonar-scanner"
                        //             }
                        //             // sh "/home/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/sonarqubescanner/bin/sonar-scanner -Dsonar.host.url=http://13.59.154.166:9000 -Dsonar.projectName=acmeair-web-app -Dsonar.projectVersion=1.0 -Dsonar.projectKey=acmeair-web-app:app -Dsonar.sources=. -Dsonar.projectBaseDir=/home/jenkins/workspace/acme-ci-tools/acmeair-web-app-pipeline"
                        //         }
                        //     }
                        // } // stage
                        stage("OWASP Dependency Check") {
                            steps {        
                                dependencyCheck additionalArguments: '', odcInstallation: 'acme-dependency-check' 
                                dependencyCheckPublisher pattern: ''
                            } // steps
                        } // stage
                        stage('Vulnerabilities & Compliance Check') {
                            steps {
                                script {
                                    echo "Running Twistlock scan on image ${templateName}:latest"
                                    twistlockScan ca: '', cert: '', compliancePolicy: 'critical', containerized: false, dockerAddress: 'tcp://localhost:2375',
                                        gracePeriodDays: 0, ignoreImageBuildTime: true, image: "${templateName}:latest",
                                        key: '', logLevel: 'true', policy: 'critical', requirePackageUpdate: false, timeout: 10
                                    echo "Completed Twistlock scan. Publishing the report..."
                                    twistlockPublish ca: '', cert: '', containerized: false, dockerAddress: 'tcp://localhost:2375', 
                                        image: "${templateName}:latest", key: '', logLevel: 'true', timeout: 10
                                    echo "Completed Twistlock publish"
                                } // script
                            } // steps
                        } // stage
                    } // parallel
                } // stage
                stage('deploy') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    def rm = openshift.selector("dc", templateName).rollout()
                                    openshift.selector("dc", templateName).related('pods').untilEach(1) {
                                        return (it.object().status.phase == "Running")
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('Promote') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // if everything else succeeded, tag the ${templateName}:latest image as ${templateName}-staging:latest
                                    // a pipeline build config for the staging environment can watch for the ${templateName}-staging:latest
                                    // image to change and then deploy it to the staging environment
                                    openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
                                }
                            }
                        } // script
                    } // steps
                } // stage
            } // stages
        } // pipeline
      type: JenkinsPipeline
